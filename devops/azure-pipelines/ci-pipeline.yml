trigger:
  branches:
    include:
    - main
    - feature/*

variables:
  # Version information
  major: '1'
  minor: '0'
  patch: $[counter(variables['minor'], 0)]
  version: '$(major).$(minor).$(patch)'
  
  # Docker configuration
  dockerRegistryServiceConnection: 'dockerhub'
  dockerRepository: 'your-dockerhub-username/moneywise'
  
  # Build configuration
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: Build
  jobs:
  - job: BuildBackend
    displayName: 'Build & Test Backend'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'

    - task: NuGetCommand@2
      displayName: 'Restore packages'
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      displayName: 'Build solution'
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: VSTest@2
      displayName: 'Run unit tests'
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\*Tests.dll
          !**\obj\**
        codeCoverageEnabled: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish backend artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'backend'
        publishLocation: 'Container'

  - job: BuildFrontend
    displayName: 'Build & Test Frontend'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'

    - task: Npm@1
      displayName: 'Install dependencies'
      inputs:
        command: 'install'
        workingDir: 'frontend'

    - task: Npm@1
      displayName: 'Run tests'
      inputs:
        command: 'custom'
        workingDir: 'frontend'
        customCommand: 'test -- --watchAll=false'

    - task: Npm@1
      displayName: 'Build frontend'
      inputs:
        command: 'custom'
        workingDir: 'frontend'
        customCommand: 'run build'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish frontend artifacts'
      inputs:
        PathtoPublish: 'frontend/build'
        ArtifactName: 'frontend'
        publishLocation: 'Container'

- stage: Docker
  dependsOn: Build
  jobs:
  - job: BuildAndPushImage
    displayName: 'Build & Push Docker Image'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: 'Build and push Docker image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(dockerRepository)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(version)
          latest
